#docker-compose -f docker-compose.yaml up -d
---
version: '3.8'
x-airflow-common:
  &airflow-common
  env_file: ./.env
  image: ${AIRFLOW_IMAGE_NAME}
  environment:
    CELERY_POSTGRES_DRIVER: ${CELERY_POSTGRES_DRIVER}
    REDIS_PROTO: ${REDIS_PROTO}
    REDIS_HOST: ${REDIS_HOST}
    REDIS_PASSWORD: ${REDIS_PASSWORD}
    REDIS_DBNUM: ${REDIS_DBNUM}
    AIRFLOW_EXECUTOR: ${AIRFLOW_EXECUTOR}
    AIRFLOW_USER_HOME: ${AIRFLOW_USER_HOME}
    AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: ${AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION}
    _AIRFLOW_WWW_USER_CREATE: ${_AIRFLOW_WWW_USER_CREATE}
    _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME}
    _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD}
    _AIRFLOW_WWW_USER_ROLE: ${_AIRFLOW_WWW_USER_ROLE}
    _AIRFLOW_WWW_USER_EMAIL: ${_AIRFLOW_WWW_USER_EMAIL}
    AIRFLOW__METRICS__STATSD_HOST: ${AIRFLOW__METRICS__STATSD_HOST}
    AIRFLOW__METRICS__STATSD_ON: ${AIRFLOW__METRICS__STATSD_ON}
    AIRFLOW__METRICS__STATSD_PORT: ${AIRFLOW__METRICS__STATSD_PORT}
    AIRFLOW__METRICS__STATSD_PREFIX: ${AIRFLOW__METRICS__STATSD_PREFIX}
    AIRFLOW__CORE__KILLED_TASK_CLEANUP_TIME: ${AIRFLOW__CORE__KILLED_TASK_CLEANUP_TIME}
    AIRFLOW__SCHEDULER__USE_ROW_LEVEL_LOCKING: ${AIRFLOW__SCHEDULER__USE_ROW_LEVEL_LOCKING}
    FLOWER_PORT: ${FLOWER_PORT}
  volumes:
    - ./data:${AIRFLOW_USER_HOME}/data
    - ./dags:${AIRFLOW_USER_HOME}/dags
    - ./logs:${AIRFLOW_USER_HOME}/logs
    - ./plugins:${AIRFLOW_USER_HOME}/plugins
    - ./pyprojects/creds:${AIRFLOW_USER_HOME}/pyprojects/creds

services:

    postgres:
      <<: *airflow-common
      env_file: ./.env
      image: ${METADB_IMAGE_NAME}
      container_name: postgres
      hostname: ${POSTGRES_HOST}
      restart: always
      environment:
        POSTGRES_DRIVER: ${POSTGRES_DRIVER}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
        POSTGRES_HOST: ${POSTGRES_HOST}
        POSTGRES_PORT: ${POSTGRES_PORT}
        POSTGRES_EXTRAS: ${POSTGRES_EXTRAS}
      ports:
        - ${POSTGRES_PORT}:${POSTGRES_PORT}
      healthcheck:
        test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}" ]
        interval: 5s
        retries: 5
      logging:
        options:
          max-size: 10m
          max-file: "3"

    redis:
      <<: *airflow-common
      image: ${REDIS_IMAGE_NAME}
      depends_on:
        postgres:
          condition: service_healthy
      ports:
        - ${REDIS_PORT}:${REDIS_PORT}
      expose:
        - ${REDIS_PORT}
      healthcheck:
        test: [ "CMD", "redis-cli", "ping" ]
        interval: 5s
        timeout: 30s
        retries: 50
      restart: always
      command: redis-server --requirepass ${REDIS_PASSWORD}

    webserver:
      <<: *airflow-common
      command: webserver
      container_name: airflow_webserver
      restart: always
      depends_on:
        postgres:
          condition: service_healthy
      logging:
        options:
          max-size: 10m
          max-file: "3"
      ports:
        - ${AIRFLOW_WEBSERVER_PORT}:${AIRFLOW_WEBSERVER_PORT}
      healthcheck:
        test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
        interval: 30s
        timeout: 30s
        retries: 3

    flower:
      <<: *airflow-common
      image: ${AIRFLOW_IMAGE_NAME}
      hostname: ${FLOWER_HOST}
      restart: always
      depends_on:
        redis:
          condition: service_healthy
        webserver:
          condition: service_healthy
      ports:
          - ${FLOWER_PORT}:${FLOWER_PORT}
      command: flower

    scheduler:
      <<: *airflow-common
      image: ${AIRFLOW_IMAGE_NAME}
      restart: always
      depends_on:
        webserver:
          condition: service_healthy
      command: scheduler
      healthcheck:
        test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
        interval: 10s
        timeout: 10s
        retries: 5

    worker:
      <<: *airflow-common
      image: ${AIRFLOW_IMAGE_NAME}
      restart: always
      depends_on:
        webserver:
          condition: service_healthy
      command: worker
      healthcheck:
        test:
          ["CMD-SHELL", 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"']
